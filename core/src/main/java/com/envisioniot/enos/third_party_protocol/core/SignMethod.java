package com.envisioniot.enos.third_party_protocol.core;

import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

public enum SignMethod {
    // toUpperCase was used on SHA1 for historical reason. Keep it for compatibility.
    SHA1("sha1", Collections.singleton("hmacsha1"), content -> DigestUtils.shaHex(content).toUpperCase()),
    SHA256("sha256", Collections.singleton("hmacsha256"), DigestUtils::sha256Hex);

    private static Logger LOG = LoggerFactory.getLogger(SignMethod.class);

    private final String name;
    private final Set<String> aliases;
    private final Function<String, String> signFunc;

    SignMethod(String name, Set<String> aliases, Function<String, String> signFunc) {
        this.name = name;
        this.aliases = aliases;
        this.signFunc = signFunc;
    }

    public String getName() {
        return name;
    }

    /**
     * Generate signature for the given content
     *
     * @param content to be signed using this sign method
     * @return signature generated by this sign method
     */
    public String sign(String content) {
        return signFunc.apply(content);
    }

    public static SignMethod getSignMethod(String name) {
        if (name == null || name.isEmpty()) {
            // If no specific sign is provided, we use SHA1 as default for historical
            // compatibility. However, this should normally not happen.
            LOG.error("sign method not provided, use SHA1 as default");
            return SignMethod.SHA1;
        }

        String nm = name.trim().toLowerCase();
        Optional<SignMethod> method = Arrays
                .stream(SignMethod.values())
                .filter(s -> s.getName().equals(nm) || s.aliases.contains(nm))
                .findFirst();
        if (method.isPresent()) {
            return method.get();
        }

        throw new IllegalArgumentException("invalid sign method name: " + name);
    }

    @Override
    public String toString() {
        return getName();
    }
}
